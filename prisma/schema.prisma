// 库存管理工具 Prisma Schema
// 严格按照 TECH_ARCHITECTURE 文档设计
// 支持 MySQL 8.0+ 特性：JSON字段、全文搜索、窗口函数

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// SQLite 不支持枚举，使用字符串约束替代

// 用户表 - 系统用户管理
model User {
  id           String   @id @default(uuid())
  email        String   @unique
  username     String   @unique // 新增用户名字段，用于登录
  name         String
  passwordHash String   @map("password_hash")
  role         String   @default("sales") // admin, sales
  status       String   @default("active") // active, inactive
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // 关联关系
  salesOrders           SalesOrder[]
  inboundRecords        InboundRecord[]
  paymentRecords        PaymentRecord[]
  factoryShipmentOrders FactoryShipmentOrder[]
  refundRecords         RefundRecord[]

  // 仪表盘模块关联关系
  dashboardConfig       DashboardConfig?
  dashboardWidgets      DashboardWidget[]
  todoItems             TodoItem[]
  assignedTodos         TodoItem[]        @relation("TodoAssignee")
  acknowledgedAlerts    InventoryAlert[]  @relation("AlertAcknowledged")
  resolvedAlerts        InventoryAlert[]  @relation("AlertResolved")
  dismissedAlerts       InventoryAlert[]  @relation("AlertDismissed")

  @@index([email])
  @@index([username])
  @@index([role])
  @@map("users")
}

// 客户表 - 客户信息管理，支持层级关系
model Customer {
  id               String    @id @default(uuid())
  name             String
  phone            String?
  address          String?
  extendedInfo     String?   @map("extended_info") // JSON格式的客户扩展信息（SQLite存储为文本）
  parentCustomerId String?   @map("parent_customer_id")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // 自关联：客户层级关系
  parentCustomer Customer?  @relation("CustomerHierarchy", fields: [parentCustomerId], references: [id])
  childCustomers Customer[] @relation("CustomerHierarchy")

  // 关联关系
  salesOrders           SalesOrder[]
  paymentRecords        PaymentRecord[]
  factoryShipmentOrders FactoryShipmentOrder[]
  refundRecords         RefundRecord[]

  @@index([name])
  @@index([phone])
  @@index([parentCustomerId], map: "idx_customers_parent")
  @@map("customers")
}

// 供应商表 - 供应商信息管理
model Supplier {
  id        String   @id @default(uuid())
  name      String
  phone     String?
  address   String?
  status    String   @default("active") // active, inactive
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // 关联关系
  salesOrders               SalesOrder[]
  factoryShipmentOrderItems FactoryShipmentOrderItem[]

  @@index([name])
  @@index([phone])
  @@index([status])
  @@map("suppliers")
}

// 分类表 - 产品分类管理，支持层级结构
model Category {
  id          String   @id @default(uuid())
  name        String
  code        String   @unique
  parentId    String?  @map("parent_id")
  sortOrder   Int      @default(0) @map("sort_order")
  status      String   @default("active") // active, inactive
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // 自关联：分类层级关系
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")

  // 关联关系
  products Product[]

  @@index([name])
  @@index([code])
  @@index([parentId], map: "idx_categories_parent")
  @@index([status])
  @@map("categories")
}

// 产品表 - 产品基础信息管理
model Product {
  id             String   @id @default(uuid())
  code           String   @unique
  name           String
  specification  String?
  specifications String?  // JSON格式的详细规格信息（SQLite存储为文本）
  unit           String   @default("piece") // piece, sheet, strip
  piecesPerUnit  Int      @default(1) @map("pieces_per_unit")
  weight         Float?
  thickness      Float?   // 产品厚度(mm)，瓷砖行业特有字段
  categoryId     String?  @map("category_id") // 产品分类ID
  status         String   @default("active") // active, inactive
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // 关联关系
  category                   Category?                   @relation(fields: [categoryId], references: [id])
  variants                   ProductVariant[]
  inventory                  Inventory[]
  salesOrderItems            SalesOrderItem[]
  inboundRecords             InboundRecord[]
  factoryShipmentOrderItems  FactoryShipmentOrderItem[]
  inventoryAlerts            InventoryAlert[]

  @@index([code])
  @@index([categoryId], map: "idx_products_category")
  @@index([status])
  @@map("products")
}

// 产品变体表 - 管理产品的色号变体
model ProductVariant {
  id          String   @id @default(uuid())
  productId   String   @map("product_id")
  colorCode   String   @map("color_code")
  colorName   String?  @map("color_name") // 色号的中文名称
  colorValue  String?  @map("color_value") // 色号对应的颜色值
  sku         String   @unique // 产品编码+色号的唯一SKU
  status      String   @default("active") // active, inactive
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // 关联关系
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  inventory   Inventory[]

  @@unique([productId, colorCode], map: "uk_product_color")
  @@index([productId])
  @@index([colorCode])
  @@index([sku])
  @@map("product_variants")
}

// 销售单表 - 销售订单主表
model SalesOrder {
  id           String   @id @default(uuid())
  orderNumber  String   @unique @map("order_number")
  customerId   String   @map("customer_id")
  userId       String   @map("user_id")
  status       String   @default("draft") // draft, confirmed, shipped, completed, cancelled
  orderType    String   @default("NORMAL") @map("order_type") // NORMAL, TRANSFER
  supplierId   String?  @map("supplier_id") // 调货销售时的供应商ID
  costAmount   Float?   @default(0) @map("cost_amount") // 调货销售的成本金额
  profitAmount Float?   @default(0) @map("profit_amount") // 调货销售的毛利金额
  totalAmount  Float    @default(0) @map("total_amount")
  remarks      String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // 关联关系
  customer Customer         @relation(fields: [customerId], references: [id])
  user     User             @relation(fields: [userId], references: [id])
  supplier Supplier?        @relation(fields: [supplierId], references: [id])
  items    SalesOrderItem[]
  payments PaymentRecord[]
  refunds  RefundRecord[]

  @@index([customerId], map: "idx_sales_orders_customer")
  @@index([userId], map: "idx_sales_orders_user")
  @@index([status], map: "idx_sales_orders_status")
  @@index([orderType], map: "idx_sales_orders_order_type")
  @@index([supplierId], map: "idx_sales_orders_supplier")
  @@index([createdAt(sort: Desc)], map: "idx_sales_orders_date")
  @@map("sales_orders")
}

// 销售单明细表 - 销售订单明细，包含瓷砖行业特有字段
model SalesOrderItem {
  id             String     @id @default(uuid())
  salesOrderId   String     @map("sales_order_id")
  productId      String?    @map("product_id") // 手动输入商品时可为空
  colorCode      String?    @map("color_code")
  quantity       Float
  unitPrice      Float      @map("unit_price")
  subtotal       Float

  // 调货销售相关字段
  unitCost       Float?     @map("unit_cost") // 单位成本价（调货销售时使用）
  costSubtotal   Float?     @map("cost_subtotal") // 成本小计（调货销售时使用）
  profitAmount   Float?     @map("profit_amount") // 毛利金额（调货销售时使用）

  // 手动输入商品信息（调货销售时使用）
  isManualProduct      Boolean? @map("is_manual_product") // 是否为手动输入的商品
  manualProductName    String?  @map("manual_product_name") // 手动输入的商品名称
  manualSpecification  String?  @map("manual_specification") // 手动输入的规格
  manualWeight         Float?   @map("manual_weight") // 手动输入的重量
  manualUnit           String?  @map("manual_unit") // 手动输入的单位

  // 关联关系
  salesOrder SalesOrder @relation(fields: [salesOrderId], references: [id], onDelete: Cascade)
  product    Product?   @relation(fields: [productId], references: [id])

  @@index([salesOrderId], map: "idx_sales_order_items_order")
  @@index([productId], map: "idx_sales_order_items_product")
  @@index([productId, colorCode], map: "idx_sales_order_items_product_color")
  @@index([unitCost], map: "idx_sales_order_items_unit_cost")
  @@index([profitAmount], map: "idx_sales_order_items_profit")
  @@map("sales_order_items")
}

// 库存表 - 产品库存管理，支持变体和色号维度
model Inventory {
  id               String    @id @default(uuid())
  productId        String    @map("product_id")
  variantId        String?   @map("variant_id") // 产品变体ID（可选，兼容无色号产品）
  colorCode        String?   @map("color_code") // 色号字段，用于瓷砖产品色号管理
  quantity         Int       @default(0)
  reservedQuantity Int       @default(0) @map("reserved_quantity") // 预留数量
  unitCost         Float?    @map("unit_cost") // 单位成本
  location         String?   // 存储位置
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // 关联关系
  product Product @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@unique([productId, variantId, colorCode], map: "uk_inventory_variant_color")
  @@index([productId], map: "idx_inventory_product")
  @@index([variantId], map: "idx_inventory_variant")
  @@index([quantity], map: "idx_inventory_quantity")
  @@index([colorCode], map: "idx_inventory_color_code")
  @@map("inventory")
}

// 入库记录表 - 入库操作记录，支持多种入库类型
model InboundRecord {
  id             String    @id @default(uuid())
  recordNumber   String    @unique @map("record_number")
  productId      String    @map("product_id")
  quantity       Float     // 支持小数点，最小值0.01
  reason         String    @default("purchase") // purchase, return, transfer, surplus, other
  remarks        String?   // 最大500字符
  userId         String    @map("user_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // 关联关系
  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@index([productId], map: "idx_inbound_records_product")
  @@index([userId], map: "idx_inbound_records_user")
  @@index([reason], map: "idx_inbound_records_reason")
  @@index([createdAt(sort: Desc)], map: "idx_inbound_records_date")
  @@map("inbound_records")
}

// 收款记录表 - 收款管理，支持部分收款和分期收款
model PaymentRecord {
  id              String   @id @default(uuid())
  paymentNumber   String   @unique @map("payment_number")
  salesOrderId    String   @map("sales_order_id")
  customerId      String   @map("customer_id")
  userId          String   @map("user_id")
  paymentMethod   String   @default("cash") // cash, bank_transfer, check, other
  paymentAmount   Float    @map("payment_amount")
  paymentDate     DateTime @map("payment_date")
  status          String   @default("pending") // pending, confirmed, cancelled
  remarks         String?
  receiptNumber   String?  @map("receipt_number") // 收据号
  bankInfo        String?  @map("bank_info") // 银行信息（转账时使用）
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // 关联关系
  salesOrder SalesOrder @relation(fields: [salesOrderId], references: [id])
  customer   Customer   @relation(fields: [customerId], references: [id])
  user       User       @relation(fields: [userId], references: [id])

  @@index([salesOrderId], map: "idx_payment_records_order")
  @@index([customerId], map: "idx_payment_records_customer")
  @@index([userId], map: "idx_payment_records_user")
  @@index([status], map: "idx_payment_records_status")
  @@index([paymentDate(sort: Desc)], map: "idx_payment_records_date")
  @@index([paymentMethod], map: "idx_payment_records_method")
  @@map("payment_records")
}

// 厂家发货订单表 - 厂家直发订单管理
model FactoryShipmentOrder {
  id                String   @id @default(uuid())
  orderNumber       String   @unique @map("order_number") // 订单编号
  containerNumber   String   @map("container_number") // 集装箱号码
  customerId        String   @map("customer_id") // 客户ID
  userId            String   @map("user_id") // 创建用户ID
  status            String   @default("draft") // 订单状态
  totalAmount       Float    @default(0) @map("total_amount") // 订单总金额
  receivableAmount  Float    @default(0) @map("receivable_amount") // 应收金额
  depositAmount     Float    @default(0) @map("deposit_amount") // 定金金额
  paidAmount        Float    @default(0) @map("paid_amount") // 已付金额
  remarks           String? // 备注
  planDate          DateTime? @map("plan_date") // 计划发货日期
  shipmentDate      DateTime? @map("shipment_date") // 实际发货日期
  arrivalDate       DateTime? @map("arrival_date") // 到港日期
  deliveryDate      DateTime? @map("delivery_date") // 收货日期
  completionDate    DateTime? @map("completion_date") // 完成日期
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // 关联关系
  customer Customer                    @relation(fields: [customerId], references: [id])
  user     User                        @relation(fields: [userId], references: [id])
  items    FactoryShipmentOrderItem[]

  @@index([orderNumber])
  @@index([containerNumber])
  @@index([customerId], map: "idx_factory_shipment_orders_customer")
  @@index([userId], map: "idx_factory_shipment_orders_user")
  @@index([status])
  @@index([createdAt(sort: Desc)], map: "idx_factory_shipment_orders_created")
  @@map("factory_shipment_orders")
}

// 厂家发货订单明细表 - 厂家发货商品明细
model FactoryShipmentOrderItem {
  id                    String  @id @default(uuid())
  factoryShipmentOrderId String  @map("factory_shipment_order_id")
  productId             String? @map("product_id") // 产品ID（库存商品时使用）
  supplierId            String  @map("supplier_id") // 供应商ID
  quantity              Float // 数量
  unitPrice             Float   @map("unit_price") // 单价
  totalPrice            Float   @map("total_price") // 小计金额

  // 手动输入商品信息（临时商品时使用）
  isManualProduct      Boolean? @map("is_manual_product")
  manualProductName    String?  @map("manual_product_name")
  manualSpecification  String?  @map("manual_specification")
  manualWeight         Float?   @map("manual_weight")
  manualUnit           String?  @map("manual_unit")

  // 通用字段（用于显示，无论是库存商品还是手动输入商品）
  displayName          String   @map("display_name") // 显示名称
  specification        String?  // 规格
  unit                 String   @default("piece") // 单位
  weight               Float? // 重量

  remarks              String? // 备注
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // 关联关系
  factoryShipmentOrder FactoryShipmentOrder @relation(fields: [factoryShipmentOrderId], references: [id], onDelete: Cascade)
  product              Product?             @relation(fields: [productId], references: [id])
  supplier             Supplier             @relation(fields: [supplierId], references: [id])

  @@index([factoryShipmentOrderId], map: "idx_factory_shipment_order_items_order")
  @@index([productId], map: "idx_factory_shipment_order_items_product")
  @@index([supplierId], map: "idx_factory_shipment_order_items_supplier")
  @@map("factory_shipment_order_items")
}

// 退款记录表 - 退款管理，支持全额退款、部分退款和换货退款
model RefundRecord {
  id              String   @id @default(uuid())
  refundNumber    String   @unique @map("refund_number")
  returnOrderId   String   @map("return_order_id")
  salesOrderId    String   @map("sales_order_id")
  customerId      String   @map("customer_id")
  userId          String   @map("user_id")
  refundType      String   @map("refund_type") // full_refund, partial_refund, exchange_refund
  refundMethod    String   @map("refund_method") // cash, bank_transfer, original_payment, other
  refundAmount    Float    @map("refund_amount")
  processedAmount Float    @default(0) @map("processed_amount")
  remainingAmount Float    @default(0) @map("remaining_amount")
  refundDate      DateTime @map("refund_date")
  processedDate   DateTime? @map("processed_date")
  status          String   @default("pending") // pending, processing, completed, rejected, cancelled
  reason          String
  remarks         String?
  bankInfo        String?  @map("bank_info")
  receiptNumber   String?  @map("receipt_number")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // 关联关系
  salesOrder SalesOrder @relation(fields: [salesOrderId], references: [id])
  customer   Customer   @relation(fields: [customerId], references: [id])
  user       User       @relation(fields: [userId], references: [id])

  @@index([salesOrderId], map: "idx_refund_records_order")
  @@index([customerId], map: "idx_refund_records_customer")
  @@index([userId], map: "idx_refund_records_user")
  @@index([status], map: "idx_refund_records_status")
  @@index([refundDate(sort: Desc)], map: "idx_refund_records_date")
  @@index([refundType], map: "idx_refund_records_type")
  @@index([refundMethod], map: "idx_refund_records_method")
  @@map("refund_records")
}

// 往来账单表 - 客户和供应商的综合账务往来管理
model AccountStatement {
  id                  String   @id @default(uuid())
  entityId            String   @map("entity_id")
  entityName          String   @map("entity_name")
  entityType          String   @map("entity_type") // customer, supplier
  totalOrders         Int      @default(0) @map("total_orders")
  totalAmount         Float    @default(0) @map("total_amount")
  paidAmount          Float    @default(0) @map("paid_amount")
  pendingAmount       Float    @default(0) @map("pending_amount")
  overdueAmount       Float    @default(0) @map("overdue_amount")
  creditLimit         Float    @default(0) @map("credit_limit")
  paymentTerms        String   @default("30天") @map("payment_terms")
  status              String   @default("active") // active, settled, overdue, suspended
  lastTransactionDate DateTime? @map("last_transaction_date")
  lastPaymentDate     DateTime? @map("last_payment_date")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  // 关联关系
  transactions StatementTransaction[]

  @@index([entityId], map: "idx_account_statements_entity")
  @@index([entityType], map: "idx_account_statements_type")
  @@index([status], map: "idx_account_statements_status")
  @@index([lastTransactionDate(sort: Desc)], map: "idx_account_statements_last_transaction")
  @@index([overdueAmount], map: "idx_account_statements_overdue")
  @@map("account_statements")
}

// 账单交易记录表 - 往来账单的详细交易明细
model StatementTransaction {
  id               String   @id @default(uuid())
  statementId      String   @map("statement_id")
  transactionType  String   @map("transaction_type") // sale, payment, refund, purchase, payment_out, adjustment
  referenceId      String   @map("reference_id") // 关联的订单、支付或退款ID
  referenceNumber  String   @map("reference_number") // 关联的单据号
  amount           Float
  balance          Float // 交易后余额
  description      String
  transactionDate  DateTime @map("transaction_date")
  dueDate          DateTime? @map("due_date")
  status           String   @default("pending") // pending, completed, overdue
  createdAt        DateTime @default(now()) @map("created_at")

  // 关联关系
  statement AccountStatement @relation(fields: [statementId], references: [id], onDelete: Cascade)

  @@index([statementId], map: "idx_statement_transactions_statement")
  @@index([transactionType], map: "idx_statement_transactions_type")
  @@index([referenceId], map: "idx_statement_transactions_reference")
  @@index([transactionDate(sort: Desc)], map: "idx_statement_transactions_date")
  @@index([status], map: "idx_statement_transactions_status")
  @@map("statement_transactions")
}

// ==================== 仪表盘模块数据模型 ====================

// 仪表盘配置表 - 用户个性化仪表盘配置
model DashboardConfig {
  id              String   @id @default(uuid())
  userId          String   @unique @map("user_id")
  refreshInterval Int      @default(30000) @map("refresh_interval") // 刷新间隔（毫秒）
  showAlerts      Boolean  @default(true) @map("show_alerts") // 是否显示预警
  showTodos       Boolean  @default(true) @map("show_todos") // 是否显示待办事项
  showCharts      Boolean  @default(true) @map("show_charts") // 是否显示图表
  showQuickActions Boolean @default(true) @map("show_quick_actions") // 是否显示快速操作
  layout          String   @default("grid") // 布局方式: grid, list
  theme           String   @default("light") // 主题: light, dark
  timeRange       String   @default("30d") @map("time_range") // 默认时间范围
  customSettings  String?  @map("custom_settings") // JSON格式的自定义设置
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_dashboard_configs_user")
  @@map("dashboard_configs")
}

// 仪表盘小部件表 - 自定义仪表盘布局和小部件
model DashboardWidget {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  type        String   // 小部件类型: stat, chart, list, alert, todo, quick_action
  title       String   // 小部件标题
  size        String   @default("md") // 尺寸: sm, md, lg, xl
  position    String   // JSON格式的位置信息 {x, y, w, h}
  config      String?  // JSON格式的小部件特定配置
  visible     Boolean  @default(true) // 是否可见
  refreshable Boolean  @default(true) // 是否可刷新
  sortOrder   Int      @default(0) @map("sort_order") // 排序顺序
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_dashboard_widgets_user")
  @@index([userId, visible], map: "idx_dashboard_widgets_user_visible")
  @@index([type], map: "idx_dashboard_widgets_type")
  @@map("dashboard_widgets")
}

// 待办事项表 - 系统生成和用户创建的待办事项
model TodoItem {
  id          String    @id @default(uuid())
  userId      String    @map("user_id")
  type        String    // 类型: sales_order, return_order, inventory_alert, customer_follow_up, custom
  title       String    // 标题
  description String?   // 描述
  priority    String    @default("medium") // 优先级: low, medium, high, urgent
  status      String    @default("pending") // 状态: pending, in_progress, completed, cancelled
  dueDate     DateTime? @map("due_date") // 截止日期
  completedAt DateTime? @map("completed_at") // 完成时间
  relatedId   String?   @map("related_id") // 关联的业务对象ID
  relatedType String?   @map("related_type") // 关联的业务对象类型
  assignedTo  String?   @map("assigned_to") // 分配给的用户ID
  metadata    String?   // JSON格式的元数据
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // 关联关系
  user     User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignee User? @relation("TodoAssignee", fields: [assignedTo], references: [id], onDelete: SetNull)

  @@index([userId], map: "idx_todo_items_user")
  @@index([assignedTo], map: "idx_todo_items_assignee")
  @@index([status], map: "idx_todo_items_status")
  @@index([priority], map: "idx_todo_items_priority")
  @@index([type], map: "idx_todo_items_type")
  @@index([dueDate], map: "idx_todo_items_due_date")
  @@index([relatedId, relatedType], map: "idx_todo_items_related")
  @@map("todo_items")
}

// 库存预警表 - 库存预警记录和处理状态
model InventoryAlert {
  id              String    @id @default(uuid())
  productId       String    @map("product_id")
  colorCode       String?   @map("color_code")
  alertType       String    @map("alert_type") // 预警类型: low_stock, out_of_stock, overstock, expired
  alertLevel      String    @map("alert_level") // 预警级别: warning, danger, critical
  currentStock    Int       @map("current_stock") // 当前库存
  safetyStock     Int       @map("safety_stock") // 安全库存
  suggestedAction String    @map("suggested_action") // 建议操作
  status          String    @default("active") // 状态: active, acknowledged, resolved, dismissed
  acknowledgedBy  String?   @map("acknowledged_by") // 确认人
  acknowledgedAt  DateTime? @map("acknowledged_at") // 确认时间
  resolvedBy      String?   @map("resolved_by") // 解决人
  resolvedAt      DateTime? @map("resolved_at") // 解决时间
  dismissedBy     String?   @map("dismissed_by") // 忽略人
  dismissedAt     DateTime? @map("dismissed_at") // 忽略时间
  notes           String?   // 备注
  metadata        String?   // JSON格式的元数据
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // 关联关系
  product          Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  acknowledgedUser User?   @relation("AlertAcknowledged", fields: [acknowledgedBy], references: [id], onDelete: SetNull)
  resolvedUser     User?   @relation("AlertResolved", fields: [resolvedBy], references: [id], onDelete: SetNull)
  dismissedUser    User?   @relation("AlertDismissed", fields: [dismissedBy], references: [id], onDelete: SetNull)

  @@index([productId], map: "idx_inventory_alerts_product")
  @@index([alertType], map: "idx_inventory_alerts_type")
  @@index([alertLevel], map: "idx_inventory_alerts_level")
  @@index([status], map: "idx_inventory_alerts_status")
  @@index([createdAt(sort: Desc)], map: "idx_inventory_alerts_created")
  @@index([productId, colorCode], map: "idx_inventory_alerts_product_color")
  @@map("inventory_alerts")
}
