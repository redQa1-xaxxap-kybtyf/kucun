name: CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  lint-and-test:
    name: 代码质量检查
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: 设置 Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 生成 Prisma Client
        run: pnpm db:generate

      - name: 代码格式检查
        run: pnpm format:check

      - name: ESLint 检查
        run: pnpm lint

      - name: TypeScript 类型检查
        run: pnpm type-check

      - name: 构建检查
        run: pnpm build
        env:
          # CI 环境变量
          DATABASE_URL: file:./dev.db
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: ci-test-secret-key-for-github-actions

      - name: Prisma Schema 验证
        run: npx prisma validate

      - name: 检查 Schema 与数据库差异
        run: |
          # 创建临时 SQLite 数据库
          export DATABASE_URL="file:./test.db"
          npx prisma migrate deploy

          # 检查 Schema 与数据库是否同步
          npx prisma migrate diff \
            --from-schema-datamodel prisma/schema.prisma \
            --to-schema-datasource prisma/schema.prisma \
            --script || echo "⚠️  警告：Schema 与数据库存在差异"
        env:
          DATABASE_URL: file:./test.db

  database-check:
    name: 数据库迁移检查
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 验证 Prisma Schema
        run: npx prisma validate

      - name: 检查 Prisma Schema 格式
        run: npx prisma format --check

      - name: 生成 Prisma Client
        run: pnpm db:generate

      - name: 创建测试数据库并应用迁移
        run: |
          # 使用 SQLite 进行迁移测试
          export DATABASE_URL="file:./test.db"
          npx prisma migrate deploy
        env:
          DATABASE_URL: file:./test.db

  build-check:
    name: 构建验证
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 生成 Prisma Client
        run: pnpm db:generate

      - name: 构建应用
        run: pnpm build
        env:
          DATABASE_URL: file:./dev.db
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: ci-test-secret-key-for-github-actions

      - name: 检查构建产物
        run: |
          if [ ! -d ".next" ]; then
            echo "❌ 构建失败：.next 目录不存在"
            exit 1
          fi
          echo "✅ 构建成功"

  security-check:
    name: 安全检查
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 检查依赖漏洞
        run: pnpm audit --audit-level=high || echo "⚠️  发现安全漏洞，请检查"

      - name: 检查过期依赖
        run: pnpm outdated || echo "ℹ️  存在过期依赖"

  summary:
    name: CI 总结
    runs-on: ubuntu-latest
    needs: [lint-and-test, database-check, build-check, security-check]
    if: always()

    steps:
      - name: 检查 CI 结果
        run: |
          if [ "${{ needs.lint-and-test.result }}" != "success" ] || \
             [ "${{ needs.database-check.result }}" != "success" ] || \
             [ "${{ needs.build-check.result }}" != "success" ]; then
            echo "❌ CI 检查失败"
            exit 1
          fi
          echo "✅ 所有 CI 检查通过"
