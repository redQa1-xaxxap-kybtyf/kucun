'use client';

import { ChevronRight } from 'lucide-react';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import * as React from 'react';

import { Button } from '@/components/ui/button';
import type { BreadcrumbItem } from '@/lib/types/layout';
import { cn } from '@/lib/utils';

interface BreadcrumbProps {
  /** 自定义面包屑项 */
  items?: BreadcrumbItem[];
  /** 是否显示首页链接 */
  showHome?: boolean;
  /** 自定义样式类名 */
  className?: string;
  /** 分隔符 */
  separator?: React.ReactNode;
}

/**
 * 路径到标题的映射
 * 严格遵循代码质量规范，统一使用中文标题
 */
const PATH_TITLES: Record<string, string> = {
  '/dashboard': '仪表盘',
  '/inventory': '库存管理',
  '/inventory/inbound': '入库记录',
  '/inventory/inbound/create': '产品入库',
  '/inventory/outbound': '出库记录',
  '/inventory/adjust': '库存调整',
  '/inventory/adjustments': '调整记录',
  '/products': '产品管理',
  '/products/create': '新建产品',
  '/sales-orders': '销售订单',
  '/sales-orders/create': '新建订单',
  '/return-orders': '退货订单',
  '/customers': '客户管理',
  '/customers/create': '新建客户',
  '/suppliers': '供应商管理',
  '/suppliers/create': '新建供应商',
  '/factory-shipments': '厂家发货',
  '/factory-shipments/create': '新建发货',
  '/payments': '支付管理',
  '/categories': '分类管理',
  '/categories/create': '新建分类',
  '/settings': '系统设置',
  '/help': '帮助中心',
  '/profile': '个人资料',
  '/create': '新建',
  '/edit': '编辑',
  '/products/edit': '编辑产品',
  '/categories/edit': '编辑分类',
  '/customers/edit': '编辑客户',
  '/suppliers/edit': '编辑供应商',
  '/inbound': '入库管理',
  '/inbound/create': '新建入库',
  '/outbound': '出库管理',
  '/adjust': '库存调整',
  '/test-api': '接口测试',
  // 财务管理模块路径映射
  '/finance': '财务管理',
  '/finance/receivables': '应收货款',
  '/finance/receivables/create': '新建应收',
  '/finance/refunds': '应退货款',
  '/finance/refunds/create': '新建退款',
  '/finance/statements': '往来账单',
  '/finance/statements/create': '新建账单',
  '/finance/payments': '收款记录',
  '/finance/payments/create': '新建收款',
  '/finance/payables': '应付款',
  '/finance/payables/create': '新建应付款',
  '/finance/payments-out': '付款记录',
  '/finance/payments-out/create': '新建付款',
  // 财务管理子路由
  receivables: '应收货款',
  refunds: '应退货款',
  statements: '往来账单',
  payments: '收款记录',
  payables: '应付款',
  'payments-out': '付款记录',
};

/**
 * 面包屑导航组件
 * 自动根据当前路径生成面包屑，支持自定义项目
 */
export function Breadcrumb({
  items,
  showHome = true,
  className,
  separator = <ChevronRight className="text-muted-foreground h-4 w-4" />,
}: BreadcrumbProps) {
  const pathname = usePathname();

  // 自动生成面包屑项
  const autoGeneratedItems = React.useMemo(() => {
    if (items) return items;

    const segments = pathname.split('/').filter(Boolean);
    const breadcrumbItems: BreadcrumbItem[] = [];

    // 添加首页
    if (showHome) {
      breadcrumbItems.push({
        title: '首页',
        href: '/dashboard',
        isCurrent: pathname === '/dashboard',
      });
    }

    // 构建路径面包屑
    let currentPath = '';
    segments.forEach((segment, index) => {
      currentPath += `/${segment}`;
      const isLast = index === segments.length - 1;

      // 获取标题
      let title = PATH_TITLES[currentPath] || segment;

      // 如果是ID（纯数字或UUID格式），根据上级路径生成更友好的名称
      if (/^[0-9a-f-]{36}$|^\d+$/.test(segment)) {
        const parentPath = `/${segments.slice(0, index).join('/')}`;
        const parentTitle = PATH_TITLES[parentPath];

        // 检查是否是编辑页面（下一个segment是edit）
        const nextSegment = segments[index + 1];
        const isEditPage = nextSegment === 'edit';

        // 根据父级路径确定详情页面的标题
        if (parentTitle === '产品管理') {
          title = isEditPage ? '产品详情' : '产品详情';
        } else if (parentTitle === '分类管理') {
          title = isEditPage ? '分类详情' : '分类详情';
        } else if (parentTitle === '客户管理') {
          title = isEditPage ? '客户详情' : '客户详情';
        } else if (parentTitle === '销售订单') {
          title = isEditPage ? '订单详情' : '订单详情';
        } else if (parentTitle === '退货订单') {
          title = isEditPage ? '退货详情' : '退货详情';
        } else {
          title = `详情 #${segment.slice(0, 8)}`;
        }
      }

      // 如果是edit段，根据上上级路径生成编辑标题
      if (segment === 'edit' && index >= 2) {
        const grandParentPath = `/${segments.slice(0, index - 1).join('/')}`;
        const grandParentTitle = PATH_TITLES[grandParentPath];

        if (grandParentTitle === '产品管理') {
          title = '编辑产品';
        } else if (grandParentTitle === '分类管理') {
          title = '编辑分类';
        } else if (grandParentTitle === '客户管理') {
          title = '编辑客户';
        } else {
          title = '编辑';
        }
      }

      breadcrumbItems.push({
        title,
        href: isLast ? undefined : currentPath,
        isCurrent: isLast,
      });
    });

    return breadcrumbItems;
  }, [pathname, items, showHome]);

  if (autoGeneratedItems.length <= 1 && !showHome) {
    return null;
  }

  return (
    <nav
      aria-label="面包屑导航"
      className={cn(
        'text-muted-foreground flex items-center space-x-1 text-sm',
        className
      )}
    >
      <ol className="flex items-center space-x-1">
        {autoGeneratedItems.map((item, index) => (
          <li key={index} className="flex items-center space-x-1">
            {index > 0 && (
              <span className="flex items-center" aria-hidden="true">
                {separator}
              </span>
            )}

            {item.isCurrent ? (
              <span className="text-foreground font-medium" aria-current="page">
                {item.title}
              </span>
            ) : item.href ? (
              <Link
                href={item.href}
                className="hover:text-foreground transition-colors"
              >
                {item.title}
              </Link>
            ) : (
              <span>{item.title}</span>
            )}
          </li>
        ))}
      </ol>
    </nav>
  );
}

/**
 * 紧凑型面包屑组件
 * 适用于移动端或空间有限的场景
 */
export function CompactBreadcrumb({
  items,
  showHome: _showHome = false,
  className,
}: Omit<BreadcrumbProps, 'separator'>) {
  const pathname = usePathname();

  const autoGeneratedItems = React.useMemo(() => {
    if (items) return items;

    const segments = pathname.split('/').filter(Boolean);
    if (segments.length === 0) return [];

    const breadcrumbItems: BreadcrumbItem[] = [];

    // 只显示当前页面和上一级
    if (segments.length > 1) {
      const parentPath = `/${segments.slice(0, -1).join('/')}`;
      const parentTitle =
        PATH_TITLES[parentPath] || segments[segments.length - 2];

      breadcrumbItems.push({
        title: parentTitle,
        href: parentPath,
        isCurrent: false,
      });
    }

    // 当前页面
    const currentTitle = PATH_TITLES[pathname] || segments[segments.length - 1];
    breadcrumbItems.push({
      title: currentTitle,
      isCurrent: true,
    });

    return breadcrumbItems;
  }, [pathname, items]);

  if (autoGeneratedItems.length <= 1) {
    return null;
  }

  return (
    <nav
      aria-label="面包屑导航"
      className={cn('flex items-center space-x-2', className)}
    >
      <Button
        variant="ghost"
        size="sm"
        asChild
        className="text-muted-foreground hover:text-foreground h-8 px-2"
      >
        <Link href={autoGeneratedItems[0].href || '#'}>
          <ChevronRight className="mr-1 h-4 w-4 rotate-180" />
          {autoGeneratedItems[0].title}
        </Link>
      </Button>

      <span className="text-foreground font-medium">
        {autoGeneratedItems[autoGeneratedItems.length - 1].title}
      </span>
    </nav>
  );
}

/**
 * 面包屑项组件
 * 可以单独使用的面包屑项
 */
export function BreadcrumbItem({
  title,
  href,
  isCurrent,
  className,
  children,
}: BreadcrumbItem & {
  className?: string;
  children?: React.ReactNode;
}) {
  if (isCurrent) {
    return (
      <span
        className={cn('text-foreground font-medium', className)}
        aria-current="page"
      >
        {children || title}
      </span>
    );
  }

  if (href) {
    return (
      <Link
        href={href}
        className={cn('hover:text-foreground transition-colors', className)}
      >
        {children || title}
      </Link>
    );
  }

  return <span className={className}>{children || title}</span>;
}
